"""
1.	Написать программу, которая будет складывать, вычитать, умножать или делить
два числа. Числа и знак операции вводятся пользователем. После выполнения
вычисления программа не должна завершаться, а должна запрашивать новые данные
для вычислений. Завершение программы должно выполняться при вводе символа '0'
в качестве знака операции. Если пользователь вводит неверный знак
(не '0', '+', '-', '*', '/'), то программа должна сообщать ему об ошибке и
снова запрашивать знак операции.

Также сообщать пользователю о невозможности деления на ноль,
если он ввел 0 в качестве делителя.

Подсказка:
Вариант исполнения:
- условие рекурсивного вызова - введена операция +, -, *, / - ШАГ РЕКУРСИИ
- условие завершения рекурсии - введена операция 0 - БАЗОВЫЙ СЛУЧАЙ

Пример:
Введите операцию (+, -, *, / или 0 для выхода): +
Введите первое число: 214
Введите второе число: 234
Ваш результат 448
Введите операцию (+, -, *, / или 0 для выхода): -
Введите первое число: вп
Вы вместо трехзначного числа ввели строку (((. Исправьтесь
Введите операцию (+, -, *, / или 0 для выхода):

Решите через рекурсию. Решение через цикл не принимается.
Для оценки Отлично в этом блоке необходимо выполнить 5 заданий из 7
"""
def operation():
    res = 0
    sign = ''
    en = False
    while(en == False):
        try:
            a = int(input("Введите первое целое число: "))    # пусть числа будут целыми
            b = int(input("Введите второе целое число: "))
            en = True
        except ValueError: print('Ввод не корректен')
    while sign not in ['0', '+', '-', '*', '/']:
        sign = input("Введите знак операции: ")
    if sign == '0':
        return
    else:
        try:
            if sign =='+': res = a + b
            elif sign =='-': res = a - b
            elif sign == '*': res = a * b
            else: res = a / b
            print(f'Результат операции: {res}')
        except ZeroDivisionError: print('На 0 делить нельзя')
        return operation()

operation()
